{"version":3,"file":"static/js/486.f397bc88.chunk.js","mappings":"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","sources":["views/integration/IntegrationList.jsx"],"sourcesContent":["// material-ui\nimport React from 'react';\nimport { Button, Typography, Skeleton } from '@mui/material';\nimport WifiIcon from '@mui/icons-material/Wifi';\n\nimport githubIcon from 'assets/images/provider/githubIcon.png';\nimport jiraIcon from 'assets/images/provider/jiraIcon.png';\nimport megaIcon from 'assets/images/provider/megaIcon.png';\nimport bitbucketIcon from 'assets/images/provider/bitbucketIcon.png';\nimport gitlabIcon from 'assets/images/provider/gitlabIcon.png';\nimport gmailIcon from 'assets/images/provider/gmailIcon.png';\nimport googleCalendarIcon from 'assets/images/provider/googleCalendarIcon.png';\nimport googleMeetIcon from 'assets/images/provider/googleMeetIcon.png';\n\n// project imports\nimport MainCard from 'ui-component/cards/MainCard';\nimport WebService from 'api/useJwt';\nimport { toast } from 'react-toastify';\n\nimport PropTypes from 'prop-types';\n\n// ==============================|| Developer Calendar PAGE ||============================== //\n\nconst ConditionalButton = ({ type, loadingProviders, handleConnect, integrationStatus }) => {\n  switch (integrationStatus) {\n    case 'soon':\n      return (\n        <Button variant=\"contained\" fullWidth disabled>\n          Soon\n        </Button>\n      );\n    case 'available':\n      return (\n        <Button variant=\"contained\" fullWidth onClick={() => handleConnect(type)}>\n          {loadingProviders === type ? <WifiIcon /> : 'Connect'}\n        </Button>\n      );\n    default:\n      return (\n        <Button variant=\"contained\" fullWidth color=\"success\">\n          Connected\n        </Button>\n      );\n  }\n};\n\n// Inside your ConditionalButton component definition\nConditionalButton.propTypes = {\n  type: PropTypes.string.isRequired,\n  loadingProviders: PropTypes.string,\n  handleConnect: PropTypes.func.isRequired,\n  integrationStatus: PropTypes.string.isRequired\n};\nfunction ProviderCategory({ category, type, handleConnect }) {\n  return (\n    <MainCard title={type} contentSX={{ display: 'flex', gap: 2, flexWarp: 'warp', overflowX: 'scroll' }}>\n      {category.map(provider => {\n        return (\n          <div key={provider.type} style={{ minWidth: 200 }}>\n            <Provider provider={provider} handleConnect={handleConnect} />\n          </div>\n        );\n      })}\n    </MainCard>\n  );\n}\n\n// Inside your ProviderCategory component definition\nProviderCategory.propTypes = {\n  category: PropTypes.array.isRequired,\n  type: PropTypes.string.isRequired,\n  handleConnect: PropTypes.func.isRequired\n};\n\nfunction Provider({ provider, loadingProviders, handleConnect }) {\n  const { type, providerId, integrationStatus } = provider;\n  return (\n    <MainCard contentSX={{ display: 'flex', flexDirection: 'column', gap: 2, alignItems: 'center' }} title={type}>\n      {/* Render icon based on provider type */}\n      {type === 'GitHub' && <img src={githubIcon} alt=\"github-icon\" width={80} height={80} />}\n      {type === 'Jira' && <img src={jiraIcon} alt=\"jira-icon\" width={80} height={80} />}\n      {type === 'Mega' && <img src={megaIcon} alt=\"mega-icon\" width={80} height={80} />}\n      {type === 'Bitbucket' && <img src={bitbucketIcon} alt=\"bitbucket-icon\" width={80} height={80} />}\n      {type === 'GitLab' && <img src={gitlabIcon} alt=\"gitlab-icon\" width={80} height={80} />}\n      {type === 'Gmail' && <img src={gmailIcon} alt=\"gmail-icon\" width={80} height={80} />}\n      {type === 'Google Calendar' && <img src={googleCalendarIcon} alt=\"googleCalendar-icon\" width={80} height={80} />}\n      {type === 'Google Meet' && <img src={googleMeetIcon} alt=\"googleMeet-icon\" width={80} height={80} />}\n\n      {/* Render button based on provider ID existence */}\n      <ConditionalButton\n        handleConnect={handleConnect}\n        integrationStatus={integrationStatus}\n        loadingProviders={loadingProviders}\n        providerId={providerId}\n        type={type}\n      />\n    </MainCard>\n  );\n}\n\n// Inside your Provider component definition\nProvider.propTypes = {\n  provider: PropTypes.shape({\n    type: PropTypes.string.isRequired,\n    providerId: PropTypes.string.isRequired,\n    integrationStatus: PropTypes.string.isRequired\n  }).isRequired,\n  loadingProviders: PropTypes.string,\n  handleConnect: PropTypes.func.isRequired\n};\n\nconst IntegrationList = () => {\n  const [loading, setLoading] = React.useState(true);\n  const [providersByCategories, setProvidersByCategories] = React.useState([]);\n  const [loadingProviders, setLoadingProviders] = React.useState();\n  React.useEffect(() => {\n    async function fetchIntegrationList() {\n      try {\n        const response = (await WebService().getProviderList()).data;\n        if (response.success) {\n          setProvidersByCategories(response.data);\n        }\n        toast.info(response.message);\n      } catch (error) {\n        toast.error(error.message);\n      } finally {\n        setLoading(false);\n      }\n    }\n    fetchIntegrationList();\n  }, []);\n\n  const handleConnect = async _providerType => {\n    setLoadingProviders(_providerType);\n    try {\n      if (_providerType === 'GitHub') {\n        const response = (await WebService().accessToGithHub()).data;\n        toast.info(response.message);\n        window.open(response.data.authorizationUrl);\n      }\n\n      const response = (await WebService().getProviderList()).data;\n      setProvidersByCategories(response.data);\n      toast.info(response.message);\n    } catch (error) {\n      console.error('Error connecting:', error);\n    } finally {\n      setLoadingProviders(null);\n    }\n  };\n\n  return (\n    <div style={{ display: 'flex', flexDirection: 'column', gap: 12 }}>\n      <MainCard title={`List of integrations applications`} style={{ width: '100%' }}>\n        <Typography variant=\"body2\">Welcome for the most important part of the application that you can make integration with</Typography>\n        <MainCard>\n          {loading || loadingProviders ? (\n            <>\n              {/* Render Skeleton placeholders for loading */}\n              {Array.from({ length: 3 }).map((_, index) => (\n                <div key={index} style={{ display: 'flex', flexDirection: 'column', gap: 5 }}>\n                  <Skeleton variant=\"rectangular\" width={'100%'} height={50} />\n                  <Skeleton variant=\"rectangular\" width={'100%'} height={100} />\n                </div>\n              ))}\n            </>\n          ) : (\n            <div style={{ display: 'flex', flexDirection: 'column', gap: 16, width: '100%' }}>\n              {/* Map through providers and render a card for each */}\n              {Object.keys(providersByCategories).map(type => (\n                <ProviderCategory category={providersByCategories[type]} handleConnect={handleConnect} type={type} key={type} />\n              ))}\n            </div>\n          )}\n        </MainCard>\n      </MainCard>\n    </div>\n  );\n};\n\nexport default IntegrationList;\n"],"names":["ConditionalButton","_ref","type","loadingProviders","handleConnect","integrationStatus","_jsx","Button","variant","fullWidth","disabled","children","onClick","WifiIcon","color","ProviderCategory","_ref2","category","MainCard","title","contentSX","display","gap","flexWarp","overflowX","map","provider","style","minWidth","Provider","_ref3","providerId","_jsxs","flexDirection","alignItems","src","githubIcon","alt","width","height","jiraIcon","megaIcon","bitbucketIcon","gitlabIcon","gmailIcon","googleCalendarIcon","googleMeetIcon","IntegrationList","loading","setLoading","React","providersByCategories","setProvidersByCategories","setLoadingProviders","async","response","WebService","getProviderList","data","success","toast","info","message","error","fetchIntegrationList","_providerType","accessToGithHub","window","open","authorizationUrl","console","Typography","_Fragment","Array","from","length","_","index","Skeleton","Object","keys"],"sourceRoot":""}